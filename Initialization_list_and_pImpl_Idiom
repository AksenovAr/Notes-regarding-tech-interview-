## Value initialization in C++ constructor

### C++ initialization list

we can initilize references in initialization list. 
Initialization list has a some advantage in front of constructor initialization.
At first, class member objects members creating and initialization doing in the same time
In classical variant at first we create the class members and then initialize them in constructor.
And the second we can initialize reference in the initialization list.

```
struct A {    // 3 
    A &a; 
    A() : a(*this) { }  
};
```
Below is example of how to use initialization list in pImpl idiom.

```
// foo.h - header file
#include <memory>
class foo
{
  public:
    foo();
    ~foo();
    foo(foo&&);
    foo& operator=(foo&&);
  private:
    class impl;
    std::unique_ptr<impl> pimpl;
};
// foo.cpp - implementation file
class foo::impl
{
  public:
    void do_internal_work()
    {
      internal_data = 5;
    }
  private:
    int internal_data = 0;
};
foo::foo()
  : pimpl{std::make_unique<impl>()}
{
  pimpl->do_internal_work();
}
foo::~foo() = default;
foo::foo(foo&&) = default;
foo& foo::operator=(foo&&) = default;
```

### C++ Initialization in constructor

Classical variant of initialization

