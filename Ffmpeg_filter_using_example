### Инициализация фильтра

    m_text - Текст для вывода 
	  m_font_name - Шрифт 
	  m_frame_rate - Частота 
	  m_width - ширина прямоугольника, где выводиться текст
	  m_height - высота прямоугольника, где выводиться текст
	  m_x_extern_coord - x координата  во внешнем прямоугольнике
	  m_y_extern_coord - y координата  во внешнем прямоугольнике
	  m_font_size - высота шрифта 
	  m_margin - отступ сверху
	  m_color - цвет, например 'red'
	  m_background_color - цвет фона
	  m_speed - скорость прокрутки текста зависит от частоты обновления 
	  m_alpha_for_background - прозрачность текста
	  m_buffersrc_ctx - вспомогательные указатели
	  m_buffersink_ctx - вспомогательные указатели
    std::unique_ptr< AVFilterInOut, avFilterInOutDeleter > m_inputs;
	  std::unique_ptr< AVFilterInOut, avFilterInOutDeleter > m_outputs;
	  std::unique_ptr< AVFilterGraph, avFilterDeleter > m_filter_graph;
	  std::unique_ptr< AVFrame, avFrameDeleter > m_frame_in;
	  std::unique_ptr< uint8_t[], imp::av_free_deleter > m_frame_buffer_in;
	  std::unique_ptr< AVFrame, avFrameDeleter > m_frame_out;
	  std::unique_ptr< uint8_t[], imp::av_free_deleter > m_frame_buffer_out;
    
'''
  avfilter_register_all();

	m_filter_graph.reset(avfilter_graph_alloc());
	if ( !m_filter_graph.get())
	{
		throw std::invalid_argument("avfilter_graph_alloc failed:");
	}

	std::ostringstream filter_desc;
	filter_desc << "video_size=" << m_width << "x" << m_height << ":pix_fmt=" << AV_PIX_FMT_YUV420P << ":time_base="
				<< 1 << "/" << static_cast<int>(m_frame_rate) << ":pixel_aspect=" << 0 << "/" << 1;

	AVFilter *buffersrc = avfilter_get_by_name("buffer");
	int ret = avfilter_graph_create_filter(&m_buffersrc_ctx, buffersrc, "in", filter_desc.str().c_str(), NULL, as_lvalue(m_filter_graph.get()));
	if (ret < 0)
	{
		throw std::invalid_argument("avfilter_graph_create_filterfor src failed:");
	}

	AVFilter *buffersink = avfilter_get_by_name("buffersink");
	enum AVPixelFormat pix_fmts[] = { AV_PIX_FMT_YUV420P, AV_PIX_FMT_NONE };
	AVBufferSinkParams *buffersink_params = av_buffersink_params_alloc();
	buffersink_params->pixel_fmts = pix_fmts;

	ret = avfilter_graph_create_filter(&m_buffersink_ctx, buffersink, "out", NULL, buffersink_params, as_lvalue(m_filter_graph.get()));
	av_free(buffersink_params);
	if (ret < 0)
	{
		throw std::invalid_argument("avfilter_graph_create_filter for sink failed:");
	}

	m_outputs.reset(avfilter_inout_alloc());
	m_inputs.reset(avfilter_inout_alloc());

	m_outputs->name = av_strdup("in");
	m_outputs->filter_ctx = m_buffersrc_ctx;
	m_outputs->pad_idx = 0;
	m_outputs->next = NULL;

	m_inputs->name = av_strdup("out");
	m_inputs->filter_ctx = m_buffersink_ctx;
	m_inputs->pad_idx = 0;
	m_inputs->next = NULL;

	filter_desc.str("");
	filter_desc.clear();
	filter_desc << " drawtext=fontfile=" << m_font_name << ":text=" << m_text << ":fontsize=" << m_font_size << ":fontcolor=" << m_color << ":"
				<< "x=" << "if(gte(tw\\,w)\\," << "if(gte(x\\,w)\\,-tw-mod(n*" << m_speed << "\\,w+tw)\\,-tw+ mod(n*" << m_speed << "\\,w+tw))" << "\\, "
				<< "(w-tw)/2" << ")" << ":y=" << m_margin;

	if (!m_background_color.empty())
	{
		filter_desc << ":box=1:boxcolor=" << m_background_color << "@" << m_alpha_for_background;
	}

	ret = avfilter_graph_parse_ptr(m_filter_graph.get(), filter_desc.str().c_str(), &as_lvalue(m_inputs.get()), &as_lvalue(m_outputs.get()), NULL);
	if (ret < 0)
	{
		throw std::invalid_argument("avfilter_graph_parse failed:");
	}

	ret = avfilter_graph_config(m_filter_graph.get(), NULL);
	if (ret < 0)
	{
		throw std::invalid_argument("avfilter_graph_config failed:");
	}

	m_frame_out.reset(static_cast< AVFrame* >( av_frame_alloc()) );
	m_frame_out->width = m_width;
	m_frame_out->height = m_height;
	m_frame_out->format = AV_PIX_FMT_YUV420P;

	uint32_t size_of_frame = av_image_get_buffer_size(AV_PIX_FMT_YUV420P, m_width, m_height, 1);
	m_frame_buffer_out.reset(static_cast< uint8_t* >(av_malloc(size_of_frame)));
	if (m_frame_buffer_out.get() == NULL)
	{
		throw std::invalid_argument("Frame can not allocate memory!");
	}

	ret = av_image_fill_arrays(m_frame_out.get()->data, m_frame_out.get()->linesize, m_frame_buffer_out.get(), AV_PIX_FMT_YUV420P, m_width, m_height, 1);
	if (ret < 0)
	{
		throw std::invalid_argument("av_image_fill_arrays for sink buffer failed:");
	}

	m_frame_in.reset(static_cast< AVFrame* >( av_frame_alloc()) );
	m_frame_in->width = m_width;
	m_frame_in->height = m_height;
	m_frame_in->format = AV_PIX_FMT_YUV420P;

	m_frame_buffer_in.reset(static_cast< uint8_t* >(av_malloc(size_of_frame)));
	if (m_frame_buffer_in.get() == NULL)
	{
		throw std::invalid_argument("Frame can not allocate memory!");
	}

	ret = av_image_fill_arrays(m_frame_in->data, m_frame_in->linesize, m_frame_buffer_in.get(), AV_PIX_FMT_YUV420P, m_width, m_height, 1);
	if (ret < 0)
	{
		throw std::invalid_argument("av_image_fill_arrays for src failed:");
	}
  '''
  ### И наконец самое интересное отрисовка 
  
  out_payload -  массив YUV420p uint8_t* b
  m_size - размер кадра
  
  {
  	uint32_t offset_Y = m_size.width * m_y_extern_coord + m_x_extern_coord;
	uint32_t offset_U_V = m_size.width/2 * m_y_extern_coord/2 + m_x_extern_coord/2;

	std::int32_t src_stride[] =
	{
		static_cast<std::int32_t>(m_size.width),
		static_cast<std::int32_t>(m_size.width / 2),
		static_cast<std::int32_t>(m_size.width / 2),
		0
	};

	const uint8_t* src_slice[] =
	{
		as_lvalue(out_payload.begin() + offset_Y),
		as_lvalue(out_payload.begin() + m_size.width* m_size.height + offset_U_V),
		as_lvalue(out_payload.begin() + m_size.width* m_size.height + (m_size.width/2* m_size.height/2) + offset_U_V),
		nullptr
	};

	av_image_copy( m_frame_in->data, m_frame_in->linesize, src_slice, src_stride, AV_PIX_FMT_YUV420P, m_width, m_height);

	m_frame_in->pts = av_frame_get_best_effort_timestamp(m_frame_in.get());
	int ret = av_buffersrc_add_frame_flags(m_buffersrc_ctx, m_frame_in.get(), AV_BUFFERSRC_FLAG_PUSH);
	if (ret < 0)
	{
		return;
	}

	av_frame_unref(m_frame_out.get());
	while (1)
	{
		ret = av_buffersink_get_frame(m_buffersink_ctx, m_frame_out.get());
		if (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF)
			break;
		if (ret < 0)
		{
			LOG(m_log, warning)
					<< "av_buffersink_get_frame failed:";
			LOG_END;
			return;
		}
	}

	av_image_copy( const_cast<uint8_t** > (src_slice), src_stride, const_cast< const uint8_t** > (m_frame_out->data),
				m_frame_out->linesize, AV_PIX_FMT_YUV420P, m_width, m_height);
  
  }
  
